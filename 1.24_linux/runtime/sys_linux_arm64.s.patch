//--from
#define SYS_exit		93
#define SYS_read		63
#define SYS_write		64
#define SYS_openat		56
#define SYS_close		57
#define SYS_pipe2		59
#define SYS_nanosleep		101
#define SYS_mmap		222
#define SYS_munmap		215
#define SYS_setitimer		103
#define SYS_clone		220
#define SYS_sched_yield		124
#define SYS_rt_sigreturn	139
#define SYS_rt_sigaction	134
#define SYS_rt_sigprocmask	135
#define SYS_sigaltstack		132
#define SYS_madvise		233
#define SYS_mincore		232
#define SYS_getpid		172
#define SYS_gettid		178
#define SYS_kill		129
#define SYS_tgkill		131
#define SYS_futex		98
#define SYS_sched_getaffinity	123
#define SYS_exit_group		94
#define SYS_clock_gettime	113
#define SYS_faccessat		48
#define SYS_socket		198
#define SYS_connect		203
#define SYS_brk			214
#define SYS_timer_create	107
#define SYS_timer_settime	110
#define SYS_timer_delete	111
//--to
#define SYS_exit		2147483647
#define SYS_read		2147483647
#define SYS_write		2147483647
#define SYS_openat		2147483647
#define SYS_close		2147483647
#define SYS_pipe2		2147483647
#define SYS_nanosleep		2147483647
#define SYS_mmap		2147483647
#define SYS_munmap		2147483647
#define SYS_setitimer		2147483647
#define SYS_clone		2147483647
#define SYS_sched_yield		2147483647
#define SYS_rt_sigreturn	2147483647
#define SYS_rt_sigaction	2147483647
#define SYS_rt_sigprocmask	2147483647
#define SYS_sigaltstack		2147483647
#define SYS_madvise		2147483647
#define SYS_mincore		2147483647
#define SYS_getpid		2147483647
#define SYS_gettid		2147483647
#define SYS_kill		2147483647
#define SYS_tgkill		2147483647
#define SYS_futex		2147483647
#define SYS_sched_getaffinity	2147483647
#define SYS_exit_group		2147483647
#define SYS_clock_gettime	2147483647
#define SYS_faccessat		2147483647
#define SYS_socket		2147483647
#define SYS_connect		2147483647
#define SYS_brk			2147483647
#define SYS_timer_create	2147483647
#define SYS_timer_settime	2147483647
#define SYS_timer_delete	2147483647
//--from
TEXT runtime·exit(SB),NOSPLIT|NOFRAME,$0-4
	MOVW	code+0(FP), R0
	MOVD	$SYS_exit_group, R8
	SVC
	RET
//--to
TEXT runtime·exit_trampoline(SB),NOSPLIT,$0
	MOVW	0(R0), R0
	BL	hitsumabushi_exit(SB)
	RET
//--from
TEXT runtime·open(SB),NOSPLIT|NOFRAME,$0-20
	MOVD	$AT_FDCWD, R0
	MOVD	name+0(FP), R1
	MOVW	mode+8(FP), R2
	MOVW	perm+12(FP), R3
	MOVD	$SYS_openat, R8
	SVC
	CMN	$4095, R0
	BCC	done
	MOVW	$-1, R0
done:
	MOVW	R0, ret+16(FP)
	RET
//--to
TEXT runtime·open_trampoline(SB),NOSPLIT,$0
	MOVW	8(R0), R1
	MOVW	12(R0), R2
	MOVD	0(R0), R0
	BL	hitsumabushi_open(SB)
	RET
//--from
TEXT runtime·closefd(SB),NOSPLIT|NOFRAME,$0-12
	MOVW	fd+0(FP), R0
	MOVD	$SYS_close, R8
	SVC
	CMN	$4095, R0
	BCC	done
	MOVW	$-1, R0
done:
	MOVW	R0, ret+8(FP)
	RET
//--to
TEXT runtime·closefd_trampoline(SB),NOSPLIT,$0-12
	MOVW	0(R0), R0
	BL	hitsumabushi_closefd(SB)
	RET
//--from
TEXT runtime·write1(SB),NOSPLIT|NOFRAME,$0-28
	MOVD	fd+0(FP), R0
	MOVD	p+8(FP), R1
	MOVW	n+16(FP), R2
	MOVD	$SYS_write, R8
	SVC
	MOVW	R0, ret+24(FP)
	RET
//--to
TEXT runtime·write1_trampoline(SB),NOSPLIT,$0-28
	MOVD	8(R0), R1
	MOVW	16(R0), R2
	MOVD	0(R0), R0
	BL	hitsumabushi_write1(SB)
	RET
//--from
TEXT runtime·read(SB),NOSPLIT|NOFRAME,$0-28
	MOVW	fd+0(FP), R0
	MOVD	p+8(FP), R1
	MOVW	n+16(FP), R2
	MOVD	$SYS_read, R8
	SVC
	MOVW	R0, ret+24(FP)
	RET
//--to
TEXT runtime·read_trampoline(SB),NOSPLIT,$0-28
	MOVD	8(R0), R1
	MOVW	16(R0), R2
	MOVW	0(R0), R0
	BL	hitsumabushi_read(SB)
	RET
//--from
TEXT runtime·usleep(SB),NOSPLIT,$24-4
	MOVWU	usec+0(FP), R3
	MOVD	R3, R5
	MOVW	$1000000, R4
	UDIV	R4, R3
	MOVD	R3, 8(RSP)
	MUL	R3, R4
	SUB	R4, R5
	MOVW	$1000, R4
	MUL	R4, R5
	MOVD	R5, 16(RSP)

	// nanosleep(&ts, 0)
	ADD	$8, RSP, R0
	MOVD	$0, R1
	MOVD	$SYS_nanosleep, R8
	SVC
	RET
//--to
TEXT runtime·usleep_trampoline(SB),NOSPLIT,$0
	MOVW	0(R0), R0
	BL	hitsumabushi_usleep(SB)
	RET
//--from
TEXT runtime·gettid(SB),NOSPLIT,$0-4
	MOVD	$SYS_gettid, R8
	SVC
	MOVW	R0, ret+0(FP)
	RET
//--to
TEXT runtime·gettid_trampoline(SB),NOSPLIT,$0
	MOVD	R0, R19		// R19 is callee-save
	BL	hitsumabushi_gettid(SB)
	MOVW	R0, 0(R19)	// return value
	RET
//--from
TEXT runtime·raise(SB),NOSPLIT|NOFRAME,$0
	MOVD	$SYS_getpid, R8
	SVC
	MOVW	R0, R19
	MOVD	$SYS_gettid, R8
	SVC
	MOVW	R0, R1	// arg 2 tid
	MOVW	R19, R0	// arg 1 pid
	MOVW	sig+0(FP), R2	// arg 3
	MOVD	$SYS_tgkill, R8
	SVC
	RET
//--to
//--from
TEXT runtime·raiseproc(SB),NOSPLIT|NOFRAME,$0
	MOVD	$SYS_getpid, R8
	SVC
	MOVW	R0, R0		// arg 1 pid
	MOVW	sig+0(FP), R1	// arg 2
	MOVD	$SYS_kill, R8
	SVC
	RET
//--to
//--from
TEXT runtime·walltime(SB),NOSPLIT,$24-12
	MOVD	RSP, R20	// R20 is unchanged by C code
	MOVD	RSP, R1

	MOVD	g_m(g), R21	// R21 = m

	// Set vdsoPC and vdsoSP for SIGPROF traceback.
	// Save the old values on stack and restore them on exit,
	// so this function is reentrant.
	MOVD	m_vdsoPC(R21), R2
	MOVD	m_vdsoSP(R21), R3
	MOVD	R2, 8(RSP)
	MOVD	R3, 16(RSP)

	MOVD	$ret-8(FP), R2 // caller's SP
	MOVD	LR, m_vdsoPC(R21)
	MOVD	R2, m_vdsoSP(R21)

	MOVD	m_curg(R21), R0
	CMP	g, R0
	BNE	noswitch

	MOVD	m_g0(R21), R3
	MOVD	(g_sched+gobuf_sp)(R3), R1	// Set RSP to g0 stack

noswitch:
	SUB	$16, R1
	BIC	$15, R1	// Align for C code
	MOVD	R1, RSP

	MOVW	$CLOCK_REALTIME, R0
	MOVD	runtime·vdsoClockgettimeSym(SB), R2
	CBZ	R2, fallback

	// Store g on gsignal's stack, so if we receive a signal
	// during VDSO code we can find the g.
	// If we don't have a signal stack, we won't receive signal,
	// so don't bother saving g.
	// When using cgo, we already saved g on TLS, also don't save
	// g here.
	// Also don't save g if we are already on the signal stack.
	// We won't get a nested signal.
	MOVBU	runtime·iscgo(SB), R22
	CBNZ	R22, nosaveg
	MOVD	m_gsignal(R21), R22          // g.m.gsignal
	CBZ	R22, nosaveg
	CMP	g, R22
	BEQ	nosaveg
	MOVD	(g_stack+stack_lo)(R22), R22 // g.m.gsignal.stack.lo
	MOVD	g, (R22)

	BL	(R2)

	MOVD	ZR, (R22)  // clear g slot, R22 is unchanged by C code

	B	finish

nosaveg:
	BL	(R2)
	B	finish

fallback:
	MOVD	$SYS_clock_gettime, R8
	SVC

finish:
	MOVD	0(RSP), R3	// sec
	MOVD	8(RSP), R5	// nsec

	MOVD	R20, RSP	// restore SP
	// Restore vdsoPC, vdsoSP
	// We don't worry about being signaled between the two stores.
	// If we are not in a signal handler, we'll restore vdsoSP to 0,
	// and no one will care about vdsoPC. If we are in a signal handler,
	// we cannot receive another signal.
	MOVD	16(RSP), R1
	MOVD	R1, m_vdsoSP(R21)
	MOVD	8(RSP), R1
	MOVD	R1, m_vdsoPC(R21)

	MOVD	R3, sec+0(FP)
	MOVW	R5, nsec+8(FP)
	RET
//--to
TEXT runtime·walltime1_trampoline(SB),NOSPLIT,$0
	MOVD	8(R0), R1
	MOVD	0(R0), R0
	BL	hitsumabushi_walltime1(SB)
	RET
//--from
TEXT runtime·nanotime1(SB),NOSPLIT,$24-8
	MOVD	RSP, R20	// R20 is unchanged by C code
	MOVD	RSP, R1

	MOVD	g_m(g), R21	// R21 = m

	// Set vdsoPC and vdsoSP for SIGPROF traceback.
	// Save the old values on stack and restore them on exit,
	// so this function is reentrant.
	MOVD	m_vdsoPC(R21), R2
	MOVD	m_vdsoSP(R21), R3
	MOVD	R2, 8(RSP)
	MOVD	R3, 16(RSP)

	MOVD	$ret-8(FP), R2 // caller's SP
	MOVD	LR, m_vdsoPC(R21)
	MOVD	R2, m_vdsoSP(R21)

	MOVD	m_curg(R21), R0
	CMP	g, R0
	BNE	noswitch

	MOVD	m_g0(R21), R3
	MOVD	(g_sched+gobuf_sp)(R3), R1	// Set RSP to g0 stack

noswitch:
	SUB	$32, R1
	BIC	$15, R1
	MOVD	R1, RSP

	MOVW	$CLOCK_MONOTONIC, R0
	MOVD	runtime·vdsoClockgettimeSym(SB), R2
	CBZ	R2, fallback

	// Store g on gsignal's stack, so if we receive a signal
	// during VDSO code we can find the g.
	// If we don't have a signal stack, we won't receive signal,
	// so don't bother saving g.
	// When using cgo, we already saved g on TLS, also don't save
	// g here.
	// Also don't save g if we are already on the signal stack.
	// We won't get a nested signal.
	MOVBU	runtime·iscgo(SB), R22
	CBNZ	R22, nosaveg
	MOVD	m_gsignal(R21), R22          // g.m.gsignal
	CBZ	R22, nosaveg
	CMP	g, R22
	BEQ	nosaveg
	MOVD	(g_stack+stack_lo)(R22), R22 // g.m.gsignal.stack.lo
	MOVD	g, (R22)

	BL	(R2)

	MOVD	ZR, (R22)  // clear g slot, R22 is unchanged by C code

	B	finish

nosaveg:
	BL	(R2)
	B	finish

fallback:
	MOVD	$SYS_clock_gettime, R8
	SVC

finish:
	MOVD	0(RSP), R3	// sec
	MOVD	8(RSP), R5	// nsec

	MOVD	R20, RSP	// restore SP
	// Restore vdsoPC, vdsoSP
	// We don't worry about being signaled between the two stores.
	// If we are not in a signal handler, we'll restore vdsoSP to 0,
	// and no one will care about vdsoPC. If we are in a signal handler,
	// we cannot receive another signal.
	MOVD	16(RSP), R1
	MOVD	R1, m_vdsoSP(R21)
	MOVD	8(RSP), R1
	MOVD	R1, m_vdsoPC(R21)

	// sec is in R3, nsec in R5
	// return nsec in R3
	MOVD	$1000000000, R4
	MUL	R4, R3
	ADD	R5, R3
	MOVD	R3, ret+0(FP)
	RET
//--to
TEXT runtime·nanotime1_trampoline(SB),NOSPLIT,$0
	MOVD	R0, R19		// R19 is callee-save
	BL	hitsumabushi_nanotime1(SB)
	MOVD	R0, 0(R19)	// return value
	RET
//--from
TEXT runtime·futex(SB),NOSPLIT|NOFRAME,$0
	MOVD	addr+0(FP), R0
	MOVW	op+8(FP), R1
	MOVW	val+12(FP), R2
	MOVD	ts+16(FP), R3
	MOVD	addr2+24(FP), R4
	MOVW	val3+32(FP), R5
	MOVD	$SYS_futex, R8
	SVC
	MOVW	R0, ret+40(FP)
	RET
//--to
TEXT runtime·futex_trampoline(SB),NOSPLIT,$0
	MOVW	8(R0), R1
	MOVW	12(R0), R2
	MOVD	16(R0), R3
	MOVD	24(R0), R4
	MOVW	32(R0), R5
	MOVD	0(R0), R0
	BL	hitsumabushi_futex(SB)
	RET
//--from
TEXT runtime·sigaltstack(SB),NOSPLIT|NOFRAME,$0
	MOVD	new+0(FP), R0
	MOVD	old+8(FP), R1
	MOVD	$SYS_sigaltstack, R8
	SVC
	CMN	$4095, R0
	BCC	ok
	MOVD	$0, R0
	MOVD	R0, (R0)	// crash
ok:
	RET
//--to
//--from
TEXT runtime·osyield(SB),NOSPLIT|NOFRAME,$0
	MOVD	$SYS_sched_yield, R8
	SVC
	RET
//--to
TEXT runtime·osyield_trampoline(SB),NOSPLIT,$0
	BL	hitsumabushi_osyield(SB)
	RET
//--from
TEXT runtime·sched_getaffinity(SB),NOSPLIT|NOFRAME,$0
	MOVD	pid+0(FP), R0
	MOVD	len+8(FP), R1
	MOVD	buf+16(FP), R2
	MOVD	$SYS_sched_getaffinity, R8
	SVC
	MOVW	R0, ret+24(FP)
	RET
//--to
TEXT runtime·sched_getaffinity_trampoline(SB),NOSPLIT,$0-28
	MOVD	8(R0), R1
	MOVD	16(R0), R2
	MOVD	0(R0), R0
	BL	hitsumabushi_sched_getaffinity(SB)
	RET
//--append
TEXT runtime·sysAllocOS_trampoline(SB),NOSPLIT,$0
	MOVD	R0, R19		// R19 is callee-save
	MOVD	0(R0), R0
	BL	hitsumabushi_sysAllocOS(SB)
	MOVD	R0, 8(R19)	// return value
	RET

TEXT runtime·sysUnusedOS_trampoline(SB),NOSPLIT,$0
	MOVD	8(R0), R1
	MOVD	0(R0), R0
	BL	hitsumabushi_sysUnusedOS(SB)
	RET

TEXT runtime·sysUsedOS_trampoline(SB),NOSPLIT,$0
	MOVD	8(R0), R1
	MOVD	0(R0), R0
	BL	hitsumabushi_sysUsedOS(SB)
	RET

TEXT runtime·sysHugePageOS_trampoline(SB),NOSPLIT,$0
	MOVD	8(R0), R1
	MOVD	0(R0), R0
	BL	hitsumabushi_sysHugePageOS(SB)
	RET

TEXT runtime·sysFreeOS_trampoline(SB),NOSPLIT,$0
	MOVD	8(R0), R1
	MOVD	0(R0), R0
	BL	hitsumabushi_sysFreeOS(SB)
	RET

TEXT runtime·sysFaultOS_trampoline(SB),NOSPLIT,$0
	MOVD	8(R0), R1
	MOVD	0(R0), R0
	BL	hitsumabushi_sysFaultOS(SB)
	RET

TEXT runtime·sysReserveOS_trampoline(SB),NOSPLIT,$0
	MOVD	R0, R19		// R19 is callee-save
	MOVD	8(R0), R1
	MOVD	0(R0), R0
	BL	hitsumabushi_sysReserveOS(SB)
	MOVD	R0, 16(R19)	// return value
	RET

TEXT runtime·sysMapOS_trampoline(SB),NOSPLIT,$0
	MOVD	8(R0), R1
	MOVD	0(R0), R0
	BL	hitsumabushi_sysMapOS(SB)
	RET

TEXT runtime·fcntl_trampoline(SB),NOSPLIT,$0
	MOVD	R0, R19		// R19 is callee-save
	MOVW	8(R0), R1
	MOVW	16(R0), R2
	MOVW	0(R0), R0
	BL	hitsumabushi_fcntl(SB)
	MOVW	R0, 24(R19)	// return value
	RET

TEXT runtime·fstat_trampoline(SB),NOSPLIT,$0
	MOVD	R0, R19		// R19 is callee-save
	MOVD	8(R0), R1
	MOVW	0(R0), R0
	BL	hitsumabushi_fstat(SB)
	MOVW	R0, 16(R19)	// return value
	RET

TEXT runtime·lseek_trampoline(SB),NOSPLIT,$0
	MOVD	R0, R19		// R19 is callee-save
	MOVD	8(R0), R1
	MOVW	16(R0), R2
	MOVW	0(R0), R0
	BL	hitsumabushi_lseek(SB)
	MOVW	R0, 24(R19)	// return value
	RET

TEXT runtime·renameat_trampoline(SB),NOSPLIT,$0
	MOVD	R0, R19		// R19 is callee-save
	MOVD	8(R0), R1
	MOVD	16(R0), R2
	MOVW	24(R0), R3
	MOVD	0(R0), R0
	BL	hitsumabushi_renameat(SB)
	MOVW	R0, 32(R19)	// return value
	RET

TEXT runtime·fstatat_trampoline(SB),NOSPLIT,$0
	MOVD	R0, R19		// R19 is callee-save
	MOVD	8(R0), R1
	MOVD	16(R0), R2
	MOVW	24(R0), R3
	MOVD	0(R0), R0
	BL	hitsumabushi_fstatat(SB)
	MOVW	R0, 32(R19)	// return value
	RET
