//--from
func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {
	runtime_entersyscall()
	// N.B. Calling RawSyscall here is unsafe with atomic coverage
	// instrumentation and race mode.
	//
	// Coverage instrumentation will add a sync/atomic call to RawSyscall.
	// Race mode will add race instrumentation to sync/atomic. Race
	// instrumentation requires a P, which we no longer have.
	//
	// RawSyscall6 is fine because it is implemented in assembly and thus
	// has no coverage instrumentation.
	//
	// This is typically not a problem in the runtime because cmd/go avoids
	// adding coverage instrumentation to the runtime in race mode.
	r1, r2, err = RawSyscall6(trap, a1, a2, a3, 0, 0, 0)
	runtime_exitsyscall()
	return
}
//--to
func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {
	var r int32
	switch trap {
	case SYS_FCNTL:
		r = fcntl1(a1, a2, a3)
	case SYS_FSTAT:
		r = fstat1(a1, unsafe.Pointer(a2))
	case SYS_READ:
		r = runtime_read(uintptr(a1), unsafe.Pointer(a2), int32(a3))
	case SYS_WRITE:
		r = write1(a1, unsafe.Pointer(a2), int32(a3))
	case SYS_LSEEK:
		r = lseek1(a1, int64(a2), int32(a3))
	case SYS_CLOSE:
		r = runtime_closefd(int32(a1))
	case SYS_MKDIRAT:
		println("syscall mkdirat() is not implemented")
		// Default to permission denied. TODO: implement this
		return 0, 0, EPERM
	case SYS_GETDENTS64:
		println("syscall getdents64() is not implemented")
		// Default to empty directory. TODO: implement this
		return 0, 0, 0
	default:
		println("unimplemented syscall at runtime.Syscall", trap)
		panic("syscall.Syscall")
		return 0, 0, ENOSYS
	}

	if r < 0 {
		return 0, 0, Errno(-r)
	}
	return uintptr(r), 0, 0
}

//go:linkname open runtime.open
func open(name *byte, mode, perm int32) int32
//go:linkname write1 runtime.write1
func write1(fd uintptr, p unsafe.Pointer, n int32) int32
//go:linkname fcntl1 runtime.fcntl1
func fcntl1(fd uintptr, a uintptr, b uintptr) int32
//go:linkname fstat1 runtime.fstat1
func fstat1(fd uintptr, p unsafe.Pointer) int32
//go:linkname lseek1 runtime.lseek1
func lseek1(fd uintptr, offset int64, whence int32) int32
//go:linkname runtime_read runtime.read
func runtime_read(fd uintptr, p unsafe.Pointer, n int32) int32
//go:linkname runtime_closefd runtime.closefd
func runtime_closefd(fd int32) int32
//go:linkname runtime_fstatat runtime.fstatat
func runtime_fstatat(fd uintptr, name unsafe.Pointer, p unsafe.Pointer, n int32) int32
//go:linkname runtime_renameat runtime.renameat
func runtime_renameat(fd1 uintptr, name1 unsafe.Pointer, fd2 uintptr, name2 unsafe.Pointer) int32
//--from
func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {
	runtime_entersyscall()
	r1, r2, err = RawSyscall6(trap, a1, a2, a3, a4, a5, a6)
	runtime_exitsyscall()
	return
}
//--to
func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {
	var r int32
	switch trap {
	case SYS_FSTATAT, SYS_NEWFSTATAT:
		r = runtime_fstatat(uintptr(a1), unsafe.Pointer(a2), unsafe.Pointer(a3), int32(a4))
	case SYS_RENAMEAT:
		r = runtime_renameat(uintptr(a1), unsafe.Pointer(a2), uintptr(a3), unsafe.Pointer(a4))
	default:
		println("unimplemented syscall at runtime.Syscall6", trap)
		panic("syscall.Syscall6")
		return 0, 0, ENOSYS
	}

	if r < 0 {
		return 0, 0, Errno(-r)
	}
	return uintptr(r), 0, 0
}
//--from
func Open(path string, mode int, perm uint32) (fd int, err error) {
	return openat(_AT_FDCWD, path, mode|O_LARGEFILE, perm)
}
//--to
func Open(path string, mode int, perm uint32) (fd int, err error) {
	p0, err := BytePtrFromString(path)
	if err != nil {
		return -1, errnoErr(EINVAL)
	}
	fd = int(open(p0, int32(mode|O_LARGEFILE), int32(perm)))
	if fd < 0 {
		return -1, errnoErr(ENOENT)
	}
	return
}
